;****************** main.s ***************
; Program written by: Isabelle Rogers and James Sullivan
; Date Created: 2/4/2017
; Last Modified: 2/14/2017
; Brief description of the program
;   The LED toggles at 8 Hz and a varying duty-cycle
; Hardware connections (External: One button and one LED)
;  PE1 is Button input  (1 means pressed, 0 means not pressed)
;  PE0 is LED output (1 activates external9 LED on protoboard)
;  PF4 is builtin button SW1 on Launchpad (Internal) 
;        Negative Logic (0 means pressed, 1 means not pressed)
; Overall functionality of this system is to operate like this
;   1) Make PE0 an output and make PE1 and PF4 inputs.
;   2) The system starts with the the LED toggling at 8Hz,
;      which is 8 times per second with a duty-cycle of 20%.
;      Therefore, the LED is ON for (0.2*1/8)th of a second
;      and OFF for (0.8*1/8)th of a second.
;   3) When the button on (PE1) is pressed-and-released increase
;      the duty cycle by 20% (modulo 100%). Therefore for each
;      press-and-release the duty cycle changes from 20% to 40% to 60%
;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
;   4) Implement a "breathing LED" when SW1 (PF4) on the Launchpad is pressed:
;      a) Be creative and play around with what "breathing" means.
;         An example of "breathing" is most computers power LED in sleep mode
;         (e.g., https://www.youtube.com/watch?v=ZT6siXyIjvQ).
;      b) When (PF4) is released while in breathing mode, resume blinking at 8Hz.
;         The duty cycle can either match the most recent duty-
;         cycle or reset to 20%.
;      TIP: debugging the breathing LED algorithm and feel on the simulator is impossible.
; PortE device registers
GPIO_PORTE_DATA_R  EQU 0x400243FC
GPIO_PORTE_DIR_R   EQU 0x40024400
GPIO_PORTE_AFSEL_R EQU 0x40024420
GPIO_PORTE_DEN_R   EQU 0x4002451C
; PortF device registers
GPIO_PORTF_DATA_R  EQU 0x400253FC
GPIO_PORTF_DIR_R   EQU 0x40025400
GPIO_PORTF_AFSEL_R EQU 0x40025420
GPIO_PORTF_PUR_R   EQU 0x40025510
GPIO_PORTF_DEN_R   EQU 0x4002551C
	
DUTY EQU 0x989680
DUTYDIV EQU 0x1E8480

SYSCTL_RCGCGPIO_R  EQU 0x400FE608
       IMPORT  TExaS_Init
       AREA    |.text|, CODE, READONLY, ALIGN=2
       THUMB
       EXPORT  Start
Start

		LDR R1, =SYSCTL_RCGCGPIO_R      ; 1) activate clock for Port E and F
		LDR R0, [R1]
		ORR R0, R0, #0x30               ; set bit 4 and 5 to turn on clock
		STR R0, [R1]
		NOP
		NOP                             ; allow time for clock to finish
										; TExaS_Init sets bus clock at 80 MHz
		BL  TExaS_Init 					; voltmeter, scope on PD3
		CPSIE  I    					; TExaS voltmeter, scope runs on interrupts

		LDR R1, =GPIO_PORTE_DIR_R       ; 5) set direction register
		MOV R0, #0x01                    ; PE0 = output, PE1 = input
		STR R0, [R1]
		LDR R1, =GPIO_PORTE_AFSEL_R     ; 6) regular port function
		MOV R0, #0                      ; 0 means disable alternate function
		STR R0, [R1]
		LDR R1, =GPIO_PORTE_DEN_R       ; 7) enable Port F digital port
		MOV R0, #0x03                   ; 1 means enable digital I/O
		STR R0, [R1]
		LDR R1, =GPIO_PORTF_DIR_R       ; 5) set direction register
		MOV R0, #0x00                    ; PF0 and PF7-4 input, PF3-1 output
		STR R0, [R1]
		LDR R1, =GPIO_PORTF_AFSEL_R     ; 6) regular port function
		MOV R0, #0                      ; 0 means disable alternate function
		STR R0, [R1]
		LDR R1, =GPIO_PORTF_PUR_R       ; pull-up resistors for PF4,PF0
		MOV R0, #0x10                   ; enable weak pull-up on PF0 and PF4
		STR R0, [R1]
		LDR R1, =GPIO_PORTF_DEN_R       ; 7) enable Port F digital port
		MOV R0, #0x10                   ; 1 means enable digital I/O
		STR R0, [R1]
		LDR R1, =GPIO_PORTE_DATA_R

		MOV R9, #0; isEpressed
		LDR R8, =DUTYDIV; DUTY
								;R3 and R4 is Temp
		MOV R5, #0				; R5 is Count
		LDR R7, =DUTY		; time before reset
		MOV R10, #5				; BreatheModifier


loop	LDR R1, =GPIO_PORTE_DATA_R
		LDR R0, =GPIO_PORTF_DATA_R
		LDR R1, [R1]
		LDR R0, [R0]
		AND R2, R0, #0x10; check if f pressed

		AND R3, R1, #0x02; check if e pressed
		EOR R4, R9, R3
		CBZ R4, noChange
		ADD R9, R3, #0
		CBNZ R9, noChange
		SUB R3, R8, R7
		BMI here
		MOV R8, #0
					; if answer is pos, branch to div
here		ADD R8, R8, #(DUTY/5)

noChange NOP

		ADD R5, R5, #1

		SUB R3, R8, R5
		BMI ledoff

ledon 	LDR R1, =GPIO_PORTE_DATA_R	; turn LED on
		LDR R0, [R1]
		ORR R0, #0x02
		STR R0, [R1]

ledoff	LDR R1, =GPIO_PORTE_DATA_R	; turn LED off
		LDR R0, [R1]
		AND R0, #0xFF
		STR R0, [R1]

		SUB R3, R5, R7
		BMI noReset
		MOV R5, #0
		CBZ R2, noReset

		ADD R8, R8, R10
		ADD R8, R8, #0
		BPL notNegative
		EOR R10, R10, #-1
		ADD R10, R10, #1

		B noReset
notNegative NOP
		SUB R3, R8, R7
		BMI noReset
		EOR R10, R10, #-1
		ADD R10, R10, #1
noReset NOP


		B loop

      ALIGN      ; make sure the end of this section is aligned
      END        ; end of file

